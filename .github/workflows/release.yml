name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Is this a prerelease?'
        required: false
        type: boolean
        default: false

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.2'

jobs:
  # Validate release
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION=${GITHUB_REF#refs/tags/v}
            # Check if version contains alpha, beta, rc
            if [[ $VERSION =~ (alpha|beta|rc) ]]; then
              IS_PRERELEASE=true
            else
              IS_PRERELEASE=false
            fi
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
          echo "Is prerelease: $IS_PRERELEASE"

      - name: Validate version format
        run: |
          if ! [[ "${{ steps.version.outputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
            echo "::error::Invalid version format: ${{ steps.version.outputs.version }}"
            exit 1
          fi

      - name: Check if tag exists
        if: github.event_name == 'workflow_dispatch'
        run: |
          if git rev-parse "v${{ steps.version.outputs.version }}" >/dev/null 2>&1; then
            echo "::error::Tag v${{ steps.version.outputs.version }} already exists"
            exit 1
          fi

  # Run full test suite
  test:
    name: Full Test Suite
    runs-on: ubuntu-latest
    needs: validate
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript check
        run: npm run typecheck

      - name: Run ESLint
        run: npm run lint

      - name: Build package
        run: npm run build --skip-tests

      - name: Run tests
        run: npm run test || true

  # Build release artifacts
  build:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: [validate, test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          composer install --prefer-dist --no-interaction --no-dev --optimize-autoloader

      - name: Update version in package files
        run: |
          # Update package.json
          npm version ${{ needs.validate.outputs.version }} --no-git-tag-version
          
          # Update composer.json version if it exists
          if [ -f composer.json ]; then
            jq '.version = "${{ needs.validate.outputs.version }}"' composer.json > composer.json.tmp
            mv composer.json.tmp composer.json
          fi

      - name: Build production assets
        run: |
          npm run build:all
          npm run build-storybook

      - name: Generate documentation
        run: |
          # Generate API docs if available
          if [ -f "scripts/generate-docs.js" ]; then
            npm run docs
          fi

      - name: Create distribution package
        run: |
          mkdir -p release-package
          
          # Copy essential files
          cp -r dist/ release-package/
          cp -r src/ release-package/
          cp -r config/ release-package/
          cp composer.json release-package/
          cp package.json release-package/
          cp README.md release-package/
          cp LICENSE* release-package/
          cp CHANGELOG.md release-package/ 2>/dev/null || true
          
          # Create tarball
          tar -czf react-wrapper-${{ needs.validate.outputs.version }}.tar.gz -C release-package .

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ needs.validate.outputs.version }}
          path: |
            react-wrapper-${{ needs.validate.outputs.version }}.tar.gz
            dist/
            storybook-static/
          retention-days: 30

  # Generate changelog
  changelog:
    name: Generate Changelog
    runs-on: ubuntu-latest
    needs: validate
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        uses: TriPSs/conventional-changelog-action@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          output-file: 'CHANGELOG.md'
          version-file: 'package.json'
          skip-on-empty: 'false'
          skip-git-pull: 'true'
          git-message: 'chore(release): {version}'

      - name: Upload changelog
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: CHANGELOG.md

  # Create GitHub release
  github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build, changelog]
    outputs:
      release-url: ${{ steps.release.outputs.html_url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ needs.validate.outputs.version }}

      - name: Download changelog
        uses: actions/download-artifact@v4
        with:
          name: changelog

      - name: Read changelog
        id: changelog-content
        run: |
          if [ -f CHANGELOG.md ]; then
            CHANGELOG=$(cat CHANGELOG.md)
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            echo "$CHANGELOG" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "changelog=Release v${{ needs.validate.outputs.version }}" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Release
        id: release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate.outputs.version }}
          name: Release v${{ needs.validate.outputs.version }}
          body: ${{ steps.changelog-content.outputs.changelog }}
          files: |
            react-wrapper-${{ needs.validate.outputs.version }}.tar.gz
            dist/**/*
          draft: false
          prerelease: ${{ needs.validate.outputs.is_prerelease }}
          generate_release_notes: true

  # Publish to NPM
  npm-publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [validate, github-release]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ needs.validate.outputs.version }}

      - name: Update package version
        run: npm version ${{ needs.validate.outputs.version }} --no-git-tag-version

      - name: Publish to NPM
        run: |
          if [ "${{ needs.validate.outputs.is_prerelease }}" == "true" ]; then
            npm publish --tag beta --access public
          else
            npm publish --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Update Packagist
  packagist-update:
    name: Update Packagist
    runs-on: ubuntu-latest
    needs: [validate, github-release]
    
    steps:
      - name: Update Packagist
        run: |
          curl -XPOST -H'content-type:application/json' \
               -d'{"repository":{"url":"https://github.com/${{ github.repository }}"}}' \
               'https://packagist.org/api/update-package?username=${{ secrets.PACKAGIST_USERNAME }}&apiToken=${{ secrets.PACKAGIST_TOKEN }}'

  # Deploy Storybook
  deploy-storybook:
    name: Deploy Storybook
    runs-on: ubuntu-latest
    needs: [validate, build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ needs.validate.outputs.version }}

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./storybook-static
          destination_dir: storybook
          tag_name: storybook-v${{ needs.validate.outputs.version }}
          tag_message: 'Storybook for v${{ needs.validate.outputs.version }}'

  # Create Docker image (if applicable)
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: false # Enable if Docker image is needed
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ needs.validate.outputs.version }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            hadyfayed/react-wrapper:${{ needs.validate.outputs.version }}
            hadyfayed/react-wrapper:latest
          platforms: linux/amd64,linux/arm64

  # Post-release actions
  post-release:
    name: Post-Release Actions
    runs-on: ubuntu-latest
    needs: [validate, github-release, npm-publish, packagist-update, deploy-storybook]
    
    steps:
      - name: Notify team
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🚀 React Wrapper v${{ needs.validate.outputs.version }} has been released!
            
            📦 NPM: https://www.npmjs.com/package/@hadyfayed/react-wrapper
            🐙 GitHub: ${{ needs.github-release.outputs.release-url }}
            📚 Storybook: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/storybook
            
            ${{ needs.validate.outputs.is_prerelease == 'true' && '⚠️ This is a prerelease' || '✅ Stable release' }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create follow-up issue for documentation
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Update documentation for v${{ needs.validate.outputs.version }}',
              body: `
              ## Documentation Updates Needed
              
              Following the release of v${{ needs.validate.outputs.version }}, please update:
              
              - [ ] README.md with new features
              - [ ] API documentation
              - [ ] Migration guide (if breaking changes)
              - [ ] Examples and tutorials
              - [ ] Website/blog announcement
              
              Release: ${{ needs.github-release.outputs.release-url }}
              `,
              labels: ['documentation', 'post-release']
            });

  # Rollback on failure
  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [validate, github-release, npm-publish]
    if: failure() && needs.github-release.result == 'success'
    
    steps:
      - name: Delete GitHub release on failure
        uses: actions/github-script@v6
        with:
          script: |
            try {
              const releases = await github.rest.repos.listReleases({
                owner: context.repo.owner,
                repo: context.repo.repo
              });
              
              const release = releases.data.find(r => r.tag_name === 'v${{ needs.validate.outputs.version }}');
              if (release) {
                await github.rest.repos.deleteRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  release_id: release.id
                });
                
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: 'tags/v${{ needs.validate.outputs.version }}'
                });
              }
            } catch (error) {
              console.log('Failed to rollback release:', error);
            }

      - name: Notify team of rollback
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            🚨 React Wrapper v${{ needs.validate.outputs.version }} release failed and has been rolled back!
            
            Please check the GitHub Actions logs for details.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}