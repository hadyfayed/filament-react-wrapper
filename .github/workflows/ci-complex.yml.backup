name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.2'

jobs:
  # JavaScript/TypeScript Testing and Building
  frontend:
    name: Frontend Tests & Build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16, 18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript check
        run: npm run typecheck

      - name: Run tests
        run: npm run test:coverage

      - name: Upload coverage to Codecov
        if: matrix.node-version == 18
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: frontend
          name: frontend-coverage

      - name: Build package
        run: npm run build:all

      - name: Build Storybook
        run: npm run build-storybook

      - name: Upload build artifacts
        if: matrix.node-version == 18
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            dist/
            storybook-static/
          retention-days: 7

  # PHP Testing
  backend:
    name: PHP Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        php-version: [8.1, 8.2, 8.3]
        laravel-version: [10, 11]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP ${{ matrix.php-version }}
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-version }}
          extensions: dom, curl, libxml, mbstring, zip, pcntl, pdo, sqlite, pdo_sqlite
          coverage: xdebug

      - name: Get Composer Cache Directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache Composer dependencies
        uses: actions/cache@v3
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install Composer dependencies
        run: composer install --prefer-dist --no-interaction --no-progress

      - name: Set Laravel version
        run: composer require "laravel/framework:^${{ matrix.laravel-version }}.0" --no-update

      - name: Update dependencies for Laravel version
        run: composer update --prefer-dist --no-interaction --no-progress

      - name: Run PHP tests
        run: vendor/bin/phpunit --coverage-clover=coverage.xml

      - name: Upload coverage to Codecov
        if: matrix.php-version == '8.2' && matrix.laravel-version == 11
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage

  # Security and Quality Checks
  security:
    name: Security & Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          composer install --prefer-dist --no-interaction

      - name: Run npm audit
        run: npm audit --audit-level moderate

      - name: Run Composer security check
        run: composer audit

      - name: Run PHPCS
        run: vendor/bin/phpcs --standard=PSR12 src/

      - name: Run PHPStan
        run: vendor/bin/phpstan analyse src/ --level=5

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  # Package Build and Release
  package:
    name: Package & Release
    runs-on: ubuntu-latest
    needs: [frontend, backend, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          composer install --prefer-dist --no-interaction --no-dev --optimize-autoloader

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Determine version
        id: version
        run: |
          if git describe --exact-match --tags HEAD 2>/dev/null; then
            VERSION=$(git describe --exact-match --tags HEAD)
            echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
            echo "is_release=true" >> $GITHUB_OUTPUT
          else
            VERSION=$(npm version patch --no-git-tag-version --preid=alpha)
            echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
            echo "is_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Update package version
        run: |
          npm version ${{ steps.version.outputs.version }} --no-git-tag-version
          # Update composer.json version if needed

      - name: Build final package
        run: npm run build:all

      - name: Generate changelog
        id: changelog
        uses: conventional-changelog/commitlint@master
        continue-on-error: true

      - name: Create GitHub Release
        if: steps.version.outputs.is_release == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          body: ${{ steps.changelog.outputs.changes }}
          files: |
            dist/**/*
            composer.json
            package.json
          draft: false
          prerelease: false

      - name: Publish to NPM
        if: steps.version.outputs.is_release == 'true'
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Submit to Packagist
        if: steps.version.outputs.is_release == 'true'
        run: |
          curl -XPOST -H'content-type:application/json' \
               -d'{"repository":{"url":"https://github.com/${{ github.repository }}"}}' \
               'https://packagist.org/api/update-package?username=${{ secrets.PACKAGIST_USERNAME }}&apiToken=${{ secrets.PACKAGIST_TOKEN }}'

  # Deploy Storybook
  deploy-storybook:
    name: Deploy Storybook
    runs-on: ubuntu-latest
    needs: [frontend]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Storybook
        run: npm run build-storybook

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./storybook-static
          destination_dir: storybook

  # Performance Testing
  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts

      - name: Run bundle analyzer
        run: npm run analyze

      - name: Check bundle size
        run: |
          BUNDLE_SIZE=$(stat -f%z dist/index.es.js)
          echo "Bundle size: $BUNDLE_SIZE bytes"
          if [ $BUNDLE_SIZE -gt 1000000 ]; then
            echo "::error::Bundle size exceeds 1MB limit"
            exit 1
          fi

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          configPath: .lighthouserc.json
          uploadArtifacts: true
          temporaryPublicStorage: true

  # Notify on completion
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [frontend, backend, security, package, deploy-storybook, performance]
    if: always()
    
    steps:
      - name: Notify Slack on success
        if: ${{ needs.frontend.result == 'success' && needs.backend.result == 'success' }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '✅ React Wrapper CI pipeline completed successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify Slack on failure
        if: ${{ needs.frontend.result == 'failure' || needs.backend.result == 'failure' }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ React Wrapper CI pipeline failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}